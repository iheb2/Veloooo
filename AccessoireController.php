<?php

namespace AccessoiresBundle\Controller;

use AccessoiresBundle\Entity\Accessoire;
use AccessoiresBundle\Entity\Panier;
use AccessoiresBundle\Entity\PanierAccessoires;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * Accessoire controller.
 *
 */
class AccessoireController extends Controller
{
    /**
     * Lists all accessoire entities.
     *
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $accessoires = $em->getRepository('AccessoiresBundle:Accessoire')->findAll();

        return $this->render('@Accessoires/accessoire/index.html.twig', array(
            'accessoires' => $accessoires,
        ));
    }

    public function indexFrontAction()
    {
        $em = $this->getDoctrine()->getManager();

        $accessoires = $em->getRepository('AccessoiresBundle:Accessoire')->findAll();
        $promotions  = $em->getRepository('AccessoiresBundle:Promotion')->findAll();
        return $this->render('@Accessoires/accessoire/index_front.html.twig', array(
            'accessoires' => $accessoires,
            'promotions'  => $promotions
        ));
    }

    /**
     * Creates a new accessoire entity.
     *
     */
    public function newAction(Request $request)
    {
        $accessoire = new Accessoire();
        $form = $this->createForm('AccessoiresBundle\Form\AccessoireType', $accessoire);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /*
            $file=$accessoire->getImage();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('images_directory'),$filename);
            $accessoire->setImage($filename);*/
            $em = $this->getDoctrine()->getManager();
            $em->persist($accessoire);
            $em->flush();

            return $this->redirectToRoute('accessoire_index');
        }

        return $this->render('@Accessoires/accessoire/new.html.twig', array(
            'accessoire' => $accessoire,
            'form' => $form->createView(),
        ));
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a accessoire entity.
     *
     */
    public function showAction(Accessoire $accessoire)
    {
        $deleteForm = $this->createDeleteForm($accessoire);
        $accessoires  = $this->getDoctrine()->getRepository(Accessoire::class)->findBy(
            array(),
            array('id' => 'ASC'),
            3
        );
        return $this->render('@Accessoires/accessoire/show.html.twig', array(
            'accessoire' => $accessoire,
            'accessoires' => $accessoires,
            'delete_form' => $deleteForm->createView(),
        ));
    }

    public function addPanierAction(Accessoire $accessoire)
    {
        $user   =   $this->getUser();
        $accessoirePanier   =   new PanierAccessoires();
        $panier =   $user->getPanier();
        if($panier === null)
        {
            $panier = new Panier();
            $panier->setUser($user);
            $this->getDoctrine()->getManager()->persist($panier);
        }
        $accessoirePaniers  =   $this->getDoctrine()->getRepository(PanierAccessoires::class)->findAll();
        $existe = false;
        foreach($accessoirePaniers as $ap)
        {
            if(($ap->getAccessoire()->getId() === $accessoire->getId()) && ($ap->getPanier()->getId() === $panier->getId()))
            {
                $existe=true;
            }
        }
        if($existe === false)
        {
            $accessoirePanier->setPanier($panier);
            $accessoirePanier->setAccessoire($accessoire);
            $accessoirePanier->setQuantite(1);
            $accessoire->addPanier($accessoirePanier);
            $panier->addAccessoires($accessoirePanier);

            $this->getDoctrine()->getManager()->persist($accessoirePanier);
            $this->getDoctrine()->getManager()->flush();
        }
        return $this->redirectToRoute('accessoire_index_front');
    }

    /**
     * Displays a form to edit an existing accessoire entity.
     *
     */
    public function editAction(Request $request, Accessoire $accessoire)
    {
        $deleteForm = $this->createDeleteForm($accessoire);
        $editForm = $this->createForm('AccessoiresBundle\Form\AccessoireType', $accessoire);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('accessoire_edit', array('id' => $accessoire->getId()));
        }

        return $this->render('@Accessoires/accessoire/edit.html.twig', array(
            'accessoire' => $accessoire,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a accessoire entity.
     *
     */
    public function deleteAction(Request $request, Accessoire $accessoire)
    {
        $form = $this->createDeleteForm($accessoire);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($accessoire);
            $em->flush();
        }

        return $this->redirectToRoute('accessoire_index');
    }

    /**
     * Creates a form to delete a accessoire entity.
     *
     * @param Accessoire $accessoire The accessoire entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Accessoire $accessoire)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('accessoire_delete', array('id' => $accessoire->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
}
